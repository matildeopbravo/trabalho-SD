package sd.client;import sd.Operation;import sd.exceptions.PermissionDeniedException;import sd.server.Reply;import sd.server.Voo;import java.io.DataInputStream;import java.io.DataOutputStream;import java.io.IOException;import java.net.Socket;import java.time.LocalDate;import java.util.ArrayList;import java.util.List;public class Client {    private ClientUser user ;    private boolean isAdmin;    private DataOutputStream out;    private DataInputStream in;    public Client (String address, int port) throws IOException {            this.user = null;            this.isAdmin = false; // esta informacao será atualizada depois da resposta do server à autenticacao            Socket socket = new Socket(address, port);            out = new DataOutputStream(socket.getOutputStream());            in = new DataInputStream(socket.getInputStream());            addHook(socket);    }    private void addHook(Socket socket) {        Runtime.getRuntime().addShutdownHook(new Thread() {            public void run() {                try {                    in.close();                    out.close();                    socket.close();                }                catch (IOException e) {                    e.printStackTrace();                }            }        });    }    public void setUser(String username, String password) {        user = new ClientUser(username,password);    }    public Reply handleReply(DataInputStream in) {        Reply rep = null;        try {            rep = Reply.deserialize(in);            System.out.println("Server replied: " + rep.toString());            if(rep.equals(Reply.Codigo))                System.out.println(in.readUTF());            return rep;        } catch (IOException e) {            e.printStackTrace();        }        return Reply.Failure;    }    public Reply registaUser(String username, String password) {        try {            Operation.Registar.serialize(out);            out.writeUTF(username);            out.writeUTF(password);        }        catch (IOException e) {            e.printStackTrace();        }        return handleReply(in);    }    public Reply autenticaUser(String username, String password) {        try {            Reply rep;            Operation.Autenticar.serialize(out);            out.writeUTF(username);            out.writeUTF(password);            rep = handleReply(in);            if (rep.equals(Reply.Success)) {                this.user = new ClientUser(username,password);                this.isAdmin = in.readBoolean();                System.out.println("Logged in as " + (isAdmin ? "admin" : "non-admin"));            }            return rep;        }        catch (IOException e){            return Reply.Failure;        }    }    public void efetuaReserva(List<String> cidades, LocalDate dataInicial, LocalDate dataFinal) throws IOException {        Operation.Reserva.serialize(out);        out.writeInt(cidades.size());        for(String c : cidades) {            out.writeUTF(c);        }        out.writeUTF(dataInicial.toString());        out.writeUTF(dataFinal.toString());    }    public Reply cancelaReserva(int idReserva) {        try {            Operation.CancelaReserva.serialize(out);            out.writeInt(idReserva);        } catch (IOException e) {            e.printStackTrace();        }        try {            return Reply.deserialize(in);        } catch (IOException e) {            e.printStackTrace();        }        return Reply.Failure;    }    public List<Voo> pedeListaVoos() throws IOException, PermissionDeniedException {        Operation.ListaVoos.serialize(out);        int size = in.readInt();        if (size >= 0) {            List<Voo> l = new ArrayList<>(size);            for (int i  = 0; i < size ; i++) {                l.add(Voo.deserialize(in));            }            return l;        }        else {            throw new PermissionDeniedException();        }    }    public boolean adicionaVoo(String origem, String destino, long capacidade, LocalDate data) throws IOException {        Operation.AdicionaVoo.serialize(out);        System.out.println(Voo.lastId);        Voo v = new Voo(origem, destino,capacidade,data);        v.serializeWithoutID(out);        System.out.println("Adicionado voo com id " + v.getID());        Reply r =  Reply.deserialize(in);        return r.equals(Reply.Success);    }    private boolean isSucessful(DataInputStream in) throws IOException {        Reply r = Reply.values()[in.readInt()];        return r.equals(Reply.Success);    }    public boolean isAutenticado() {        return user != null;    }    public boolean isAdmin() {        return isAdmin;    }    public ClientUser getUserAutenticado() {        return user;    }}